generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_KEVAL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())
  stores    Store[]
}

model Store {
  id               String      @id @default(uuid())
  createdAt        DateTime    @default(now())
  userId           String
  storeDescription String?
  storeTitle       String
  storeUrl         String      @unique
  socialSet        SocialSet?
  user             User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  storeItems       StoreItem[]
  sale           Sale[]


  payments         Payment[]
  thumbnailUrl     String?
  instagram        String?
  tiktok           String?
  youtube          String?
  twitter          String?
  color            String?
  schedules Schedule[]
  bookings Booking[]
  calendarSetting CalendarSetting?

  @@index([userId], map: "userId")
  @@index([storeUrl], map: "storeUrl")
}

model Payment {
  id           Int   @id @default(autoincrement()) @unique
  storeId        String
  accountId       String @unique
  onboardingComplete Boolean @default(false)
  store          Store           @relation(fields: [storeId], references: [id], onDelete: Cascade)
}

model StoreItem {
  id           Int   @id @default(autoincrement()) @unique
  itemOrder      Int             @unique @default(autoincrement())
  storeId        String
  itemType       StoreItemType
  DigitalProduct DigitalProduct?
  calendarProduct CalendarProduct?
  Link           Link?
  store          Store           @relation(fields: [storeId], references: [id], onDelete: Cascade)
  sale           Sale[]
}

model Link {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  title        String
  url         String
  description  String?
  thumbnailUrl String?
  storeItemId Int    @unique
  storeItem   StoreItem @relation(fields: [storeItemId], references: [id], onDelete: Cascade)
}

model DigitalProduct {
  id           Int   @id @default(autoincrement()) @unique
  createdAt        DateTime  @default(now())
  updatedAt        DateTime?  @updatedAt
  name             String?
  price            String?
  recPrice         String?
  minPrice         String?  
  description      Json?
  currency         String[] @default(["USD"])
  storeItemId      Int   @unique
  shortDescription String?
  flexPrice        Boolean?
  externalFile     Boolean?
  visibility       Boolean? 
  urls             Json?
  thumbnailUrl     String?
  createdBy        String?
  ddFiles          DDFile[]
  storeItem        StoreItem @relation(fields: [storeItemId], references: [id], onDelete: Cascade)

  @@index([storeItemId])
}

model DDFile {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  url       String
  digitalProductId Int
  digitalProduct DigitalProduct @relation(fields: [digitalProductId], references: [id], onDelete: Cascade)
  @@index([digitalProductId])
}

model SocialSet {
  id        String   @id @default(uuid())
  updatedAt DateTime @updatedAt
  instagram String
  facebook  String
  twitter   String
  youtube   String
  twitch    String
  tiktok    String
  storeId   String   @unique
  store     Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
}

enum StoreItemType {
  LINK @map("link")
  DIGITALPRODUCT @map("digitalproduct")
  SOCIALSET @map("socialset")
  CALENDAR @map("calendar")
  WEBINAR @map("webinar")
  COURSE @map("course")
}

enum PeriodType {
  UNLIMITED @map("unlimited")
  ROLLING   @map("rolling")
  RANGE     @map("range")
}

model Schedule {
  id           Int   @id @default(autoincrement()) @unique
  storeId String 
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)
  calendarProduct    CalendarProduct[]
  name         String
  timeZone     String?
  availability Availability[]
  calendarSettingId Int
  calendarSetting CalendarSetting @relation(fields: [calendarSettingId], references: [id])

  @@index([storeId])
}

model Availability {
  id          Int        @id @default(autoincrement()) @unique
  calendarProduct   CalendarProduct? @relation(fields: [calendarProductId], references: [id]) 
  calendarProductId Int?
  days        Int[]
  startTime   DateTime   @db.Time
  endTime     DateTime   @db.Time
  date        DateTime?  @db.Date
  Schedule    Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  scheduleId  Int

  @@index([calendarProductId])
  @@index([scheduleId])
}

model CalendarProduct {
  id                              Int                     @id @default(autoincrement())
  createdAt                       DateTime                @default(now())
  updatedAt                       DateTime                @updatedAt

  title                           String
  thumbnailUrl                    String?
  shortDescription                String?
  description                     Json?
  length                          Int                 
  hidden                          Boolean                 @default(false)
  bookings                        Booking[]
  availability                    Availability[]
  timeZone                        String

  price                           String?                 @default("0")
  recPrice                        String?                 @default("0")
  minPrice                        String?                 @default("0")
  flexPrice                       Boolean?                @default(false)   
  currency                        String[]                @default(["USD"])

  periodType                      PeriodType              @default(UNLIMITED)
  periodStartDate                 DateTime?
  periodEndDate                   DateTime?

  minimumBookingNotice            Int                     @default(120)
  beforeEventBuffer               Int                     @default(0)
  afterEventBuffer                Int                     @default(0)
  
  schedule                        Schedule?               @relation(fields: [scheduleId], references: [id])
  scheduleId                      Int?

  calendarSettingId               Int
  calendarSetting                 CalendarSetting        @relation(fields: [calendarSettingId], references: [id])
  storeItemId Int @unique

  storeItem StoreItem @relation(fields: [storeItemId], references: [id], onDelete: Cascade)


  @@index([storeItemId])
}

model CalendarSetting{
  id                              Int                     @id @default(autoincrement())
  minimumBookingNotice            Int                     @default(120)
  beforeEventBuffer               Int                     @default(0)
  afterEventBuffer                Int                     @default(0)
  googleCalendar                  GoogleCalendar?
  calendarProduct                 CalendarProduct[] 
  Schedule                        Schedule[]      
  timeZone                        String?
  defaultScheduleId               Int?    
  storeId                         String                  @unique
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@index([storeId])
}



model GoogleCalendar{

  id        Int   @id @default(autoincrement())
  email    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  refreshToken String
  accessToken String 
  bookings Booking[]

  calendarSettingId Int @unique
  calendarSetting CalendarSetting @relation(fields: [calendarSettingId], references: [id], onDelete: Cascade)

  @@index([id])
}

model Booking{
  id       Int   @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  storeId String 
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)
  calendarProductId Int
  calendarProduct CalendarProduct? @relation(fields: [calendarProductId], references: [id])

  title String
  description String?
  attendees Attendee[]
  startTime DateTime
  endTime DateTime
  googleCalendarId Int?
  bookingStatus BookingStatus
  googleCalendar GoogleCalendar? @relation(fields: [googleCalendarId], references: [id])

  meetingUrl String?
  meetingPassword String?
  meetingId String?
  rescheduled           Boolean?                @default(false)

  saleId Int? @unique
  sale Sale? @relation(fields: [saleId], references: [id])
  cancelledSaleId Int? 

  @@index([calendarProductId])
  @@index([googleCalendarId])
  @@index([storeId])
}

model Sale {
  id             Int         @id @default(autoincrement())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  storeId        String
  store          Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeItemId    Int
  storeItem      StoreItem   @relation(fields: [storeItemId], references: [id], onDelete: Cascade)
  salePrice      String
  buyerEmail     String
  buyerName      String?
  status         SaleStatus
  booking        Booking?
  //add something for payment details like transaction id something of stripe
  additionalInfo Json?       // Any additional information relevant to the sale

  @@index([storeId])
}

enum SaleStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  REFUNDPENDING
}

enum BookingStatus {
  SCHEDULED
  CANCELLED
}

model Attendee {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  name        String
  timeZone    String
  booking     Booking?     @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId   Int?

  @@index([email])
  @@index([bookingId])
}